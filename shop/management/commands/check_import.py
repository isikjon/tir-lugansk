import csv
import os
from django.core.management.base import BaseCommand
from shop.models import Product


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
        parser.add_argument('--fix-missing', action='store_true', help='–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã')

    def handle(self, *args, **options):
        csv_file = options['csv_file']
        fix_missing = options['fix_missing']
        
        if not os.path.exists(csv_file):
            self.stdout.write(self.style.ERROR(f'CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}'))
            return

        self.stdout.write('üìä –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞...')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–¥—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
        db_codes = set(Product.objects.values_list('code', flat=True))
        self.stdout.write(f'üíæ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(db_codes)} —Ç–æ–≤–∞—Ä–æ–≤')
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–æ–¥—ã –∏–∑ CSV
        csv_codes = set()
        valid_csv_rows = 0
        invalid_rows = 0
        
        with open(csv_file, 'r', encoding='utf-8-sig') as file:
            reader = csv.DictReader(file, delimiter=';')
            
            for row_num, row in enumerate(reader, start=1):
                tmp_id = row.get('TMP_ID', '').strip()
                name = row.get('NAME', '').strip()
                
                if tmp_id and name:
                    csv_codes.add(tmp_id)
                    valid_csv_rows += 1
                else:
                    invalid_rows += 1
        
        self.stdout.write(f'üìÑ –í CSV —Ñ–∞–π–ª–µ: {len(csv_codes)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
        self.stdout.write(f'‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ CSV: {invalid_rows}')
        
        # –ò—â–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        missing_codes = csv_codes - db_codes
        extra_codes = db_codes - csv_codes
        
        self.stdout.write(f'\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(db_codes)}')
        self.stdout.write(f'üìù –í—Å–µ–≥–æ –≤ CSV: {len(csv_codes)}')
        self.stdout.write(f'‚ùó –ù–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö: {len(missing_codes)}')
        self.stdout.write(f'‚ûï –õ–∏—à–Ω–∏—Ö –≤ –ë–î: {len(extra_codes)}')
        
        if missing_codes:
            self.stdout.write(f'\n‚ùó –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –¢–û–í–ê–†–´ ({len(missing_codes)} —à—Ç.):')
            for i, code in enumerate(list(missing_codes)[:10], 1):
                self.stdout.write(f'  {i}. {code}')
            if len(missing_codes) > 10:
                self.stdout.write(f'  ... –∏ –µ—â–µ {len(missing_codes) - 10} —Ç–æ–≤–∞—Ä–æ–≤')
        
        if extra_codes:
            self.stdout.write(f'\n‚ûï –õ–ò–®–ù–ò–ï –í –ë–î ({len(extra_codes)} —à—Ç.):')
            for i, code in enumerate(list(extra_codes)[:10], 1):
                self.stdout.write(f'  {i}. {code}')
            if len(extra_codes) > 10:
                self.stdout.write(f'  ... –∏ –µ—â–µ {len(extra_codes) - 10} —Ç–æ–≤–∞—Ä–æ–≤')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_rate = (len(db_codes) / len(csv_codes)) * 100 if csv_codes else 0
        self.stdout.write(f'\nüìä –ü–†–û–¶–ï–ù–¢ –£–°–ü–ï–®–ù–û–°–¢–ò: {success_rate:.2f}%')
        
        if success_rate >= 99:
            self.stdout.write(self.style.SUCCESS('üéâ –û–¢–õ–ò–ß–ù–û! –ò–º–ø–æ—Ä—Ç –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π!'))
        elif success_rate >= 95:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã'))
        else:
            self.stdout.write(self.style.ERROR('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ò–ú–ü–û–†–¢'))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ–∏–º–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
        if fix_missing and missing_codes:
            self.stdout.write(f'\nüîß –î–û–ò–ú–ü–û–†–¢ {len(missing_codes)} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤...')
            self.import_missing_products(csv_file, missing_codes)
        elif missing_codes:
            self.stdout.write(f'\nüí° –î–ª—è –¥–æ–∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --fix-missing')

    def import_missing_products(self, csv_file, missing_codes):
        """–ò–º–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        from django.utils.text import slugify
        from django.db import transaction
        from shop.models import Category, Brand
        
        imported = 0
        errors = 0
        
        # –ö—ç—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤
        categories_cache = {}
        brands_cache = {}
        products_batch = []
        
        with open(csv_file, 'r', encoding='utf-8-sig') as file:
            reader = csv.DictReader(file, delimiter=';')
            
            for row in reader:
                tmp_id = row.get('TMP_ID', '').strip()
                
                if tmp_id not in missing_codes:
                    continue
                
                try:
                    name = row.get('NAME', '').strip()
                    producer = row.get('PROPERTY_PRODUCER_ID', '').strip()
                    tmc_number = row.get('PROPERTY_TMC_NUMBER', '').strip()
                    model_avto = row.get('PROPERTY_MODEL_AVTO', '').strip()
                    section_id = row.get('SECTION_ID', '').strip()
                    
                    if section_id:
                        section_id = section_id.replace('[', '').replace(']', '').replace(';', '')
                    
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    category = None
                    if section_id:
                        if section_id not in categories_cache:
                            category, _ = Category.objects.get_or_create(
                                slug=f'category-{section_id}',
                                defaults={'name': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {section_id}'}
                            )
                            categories_cache[section_id] = category
                        else:
                            category = categories_cache[section_id]
                    
                    # –ë—Ä–µ–Ω–¥
                    brand = None
                    if producer:
                        producer_slug = slugify(producer)
                        if producer_slug not in brands_cache:
                            brand, _ = Brand.objects.get_or_create(
                                slug=producer_slug,
                                defaults={'name': producer}
                            )
                            brands_cache[producer_slug] = brand
                        else:
                            brand = brands_cache[producer_slug]
                    
                    # –¢–æ–≤–∞—Ä
                    product = Product(
                        name=name,
                        slug=f'product-{tmp_id}',
                        category=category,
                        brand=brand,
                        code=tmp_id,
                        catalog_number=tmc_number,
                        applicability=model_avto,
                        price=0,
                        in_stock=True,
                    )
                    products_batch.append(product)
                    
                    if len(products_batch) >= 500:
                        with transaction.atomic():
                            Product.objects.bulk_create(products_batch, ignore_conflicts=True)
                        imported += len(products_batch)
                        self.stdout.write(f'üîß –î–æ–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported}')
                        products_batch = []
                
                except Exception as e:
                    errors += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if products_batch:
            with transaction.atomic():
                Product.objects.bulk_create(products_batch, ignore_conflicts=True)
            imported += len(products_batch)
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –î–æ–∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {imported} —Ç–æ–≤–∞—Ä–æ–≤, –æ—à–∏–±–æ–∫: {errors}')) 