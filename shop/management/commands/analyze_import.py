import csv
import os
from django.core.management.base import BaseCommand
import chardet
import re


class Command(BaseCommand):
    help = '–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –∏–º–ø–æ—Ä—Ç–∞ CSV - –≥–¥–µ —Ç–µ—Ä—è—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')

    def detect_encoding(self, file_path):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as file:
                raw_data = file.read(50000)
                result = chardet.detect(raw_data)
                return result['encoding']
        except Exception as e:
            return 'cp1251'

    def parse_csv_line(self, line, delimiter='#'):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É CSV"""
        line = line.rstrip(delimiter).strip()
        fields = line.split(delimiter)
        
        while len(fields) < 8:
            fields.append('')
            
        return {
            'TMP_ID': fields[0].strip() if len(fields) > 0 else '',
            'NAME': fields[1].strip() if len(fields) > 1 else '',
            'PROPERTY_PRODUCER_ID': fields[2].strip() if len(fields) > 2 else '',
            'PROPERTY_TMC_NUMBER': fields[3].strip() if len(fields) > 3 else '',
            'PROPERTY_ARTIKYL_NUMBER': fields[4].strip() if len(fields) > 4 else '',
            'PROPERTY_MODEL_AVTO': fields[5].strip() if len(fields) > 5 else '',
            'PROPERTY_CROSS_NUMBER': fields[6].strip() if len(fields) > 6 else '',
            'SECTION_ID': fields[7].strip() if len(fields) > 7 else '',
        }

    def handle(self, *args, **options):
        csv_file = options['csv_file']
        
        if not os.path.exists(csv_file):
            self.stdout.write(self.style.ERROR(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}'))
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        encoding = self.detect_encoding(csv_file)
        self.stdout.write(f'üîç –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}')
        
        try:
            with open(csv_file, 'r', encoding=encoding) as file:
                lines = file.readlines()
                
                total_lines = len(lines)
                data_lines = total_lines - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                
                self.stdout.write(f'üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
                self.stdout.write(f'   üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {total_lines}')
                self.stdout.write(f'   üì¶ –°—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {data_lines}')
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                valid_rows = 0
                empty_tmp_id = 0
                empty_name = 0
                malformed_rows = 0
                duplicate_tmp_ids = 0
                invalid_chars = 0
                
                tmp_ids_seen = set()
                problem_lines = []
                
                for line_num, line in enumerate(lines[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    try:
                        row = self.parse_csv_line(line, '#')
                        
                        tmp_id = row.get('TMP_ID', '').strip()
                        name = row.get('NAME', '').strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                        if not tmp_id:
                            empty_tmp_id += 1
                            if len(problem_lines) < 10:
                                problem_lines.append(f'–°—Ç—Ä–æ–∫–∞ {line_num}: –ü—É—Å—Ç–æ–π TMP_ID')
                            continue
                            
                        if not name:
                            empty_name += 1
                            if len(problem_lines) < 10:
                                problem_lines.append(f'–°—Ç—Ä–æ–∫–∞ {line_num}: –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (TMP_ID: {tmp_id})')
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î—É–±–ª–∏–∫–∞—Ç—ã TMP_ID
                        if tmp_id in tmp_ids_seen:
                            duplicate_tmp_ids += 1
                            if len(problem_lines) < 10:
                                problem_lines.append(f'–°—Ç—Ä–æ–∫–∞ {line_num}: –î—É–±–ª–∏–∫–∞—Ç TMP_ID: {tmp_id}')
                            continue
                        
                        tmp_ids_seen.add(tmp_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ TMP_ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        if re.search(r'["\'\[\]<>]', tmp_id) or re.search(r'["\'\[\]<>]', name):
                            invalid_chars += 1
                            if len(problem_lines) < 10:
                                problem_lines.append(f'–°—Ç—Ä–æ–∫–∞ {line_num}: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (TMP_ID: {tmp_id})')
                        
                        valid_rows += 1
                        
                    except Exception as e:
                        malformed_rows += 1
                        if len(problem_lines) < 10:
                            problem_lines.append(f'–°—Ç—Ä–æ–∫–∞ {line_num}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}')
                        continue
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                self.stdout.write(f'\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:')
                self.stdout.write(f'   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_rows}')
                self.stdout.write(f'   ‚ùå –ü—É—Å—Ç–æ–π TMP_ID: {empty_tmp_id}')
                self.stdout.write(f'   ‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {empty_name}')
                self.stdout.write(f'   ‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã TMP_ID: {duplicate_tmp_ids}')
                self.stdout.write(f'   ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {invalid_chars}')
                self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {malformed_rows}')
                
                lost_rows = data_lines - valid_rows
                self.stdout.write(f'\nüí• –ü–û–¢–ï–†–Ø–ù–û –°–¢–†–û–ö: {lost_rows}')
                
                if lost_rows > 0:
                    self.stdout.write(f'üìã –ü–†–ò–ú–ï–†–´ –ü–†–û–ë–õ–ï–ú:')
                    for problem in problem_lines:
                        self.stdout.write(f'   {problem}')
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                self.stdout.write(f'\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
                if empty_tmp_id > 0:
                    self.stdout.write(f'   - –î–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é TMP_ID –¥–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ ID')
                if empty_name > 0:
                    self.stdout.write(f'   - –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                if duplicate_tmp_ids > 0:
                    self.stdout.write(f'   - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã TMP_ID (–¥–æ–±–∞–≤–ª—è—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å)')
                if invalid_chars > 0:
                    self.stdout.write(f'   - –û—á–∏—â–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ TMP_ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö')
                
                if lost_rows == 0:
                    self.stdout.write(self.style.SUCCESS(f'üéâ –í–°–ï –°–¢–†–û–ö–ò –í–ê–õ–ò–î–ù–´! –î–æ–ª–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è {valid_rows} —Ç–æ–≤–∞—Ä–æ–≤'))
                else:
                    self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ë–£–î–ï–¢ –ü–û–¢–ï–†–Ø–ù–û {lost_rows} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {data_lines}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'))
            import traceback
            traceback.print_exc() 