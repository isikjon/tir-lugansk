import csv
import os
from django.core.management.base import BaseCommand
from django.utils.text import slugify
from shop.models import Brand
import chardet


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ OE_BRANDS.csv'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –±—Ä–µ–Ω–¥–∞–º–∏')
        parser.add_argument('--encoding', type=str, default='auto', help='–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞')
        parser.add_argument('--delimiter', type=str, default=';', help='–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ CSV —Ñ–∞–π–ª–µ')
        parser.add_argument('--test-lines', type=int, default=0, help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏–º–ø–æ—Ä—Ç –ø–µ—Ä–≤—ã–º–∏ N —Å—Ç—Ä–æ–∫–∞–º–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')

    def detect_encoding(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as file:
                raw_data = file.read()
                result = chardet.detect(raw_data)
                detected_encoding = result['encoding']
                confidence = result['confidence']
                
                self.stdout.write(f'–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {detected_encoding} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})')
                
                return detected_encoding
                    
        except Exception as e:
            self.stdout.write(f'–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}')
            return 'cp1251'

    def try_read_file(self, file_path, encoding):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
        try:
            with open(file_path, 'r', encoding=encoding) as file:
                for i, line in enumerate(file):
                    if i >= 10:  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                        break
                    self.stdout.write(f'–°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}')
                return True
        except UnicodeDecodeError as e:
            self.stdout.write(f'–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å {encoding}: {e}')
            return False
        except Exception as e:
            self.stdout.write(f'–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Å {encoding}: {e}')
            return False

    def handle(self, *args, **options):
        csv_file = options['csv_file']
        encoding = options['encoding']
        delimiter = options['delimiter']
        test_lines = options.get('test_lines', 0)
        
        if not os.path.exists(csv_file):
            self.stdout.write(self.style.ERROR(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}'))
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        if encoding == 'auto':
            encoding = self.detect_encoding(csv_file)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings_to_try = [encoding, 'cp1251', 'windows-1251', 'utf-8', 'utf-8-sig', 'iso-8859-1']
        
        working_encoding = None
        self.stdout.write('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏:')
        
        for enc in encodings_to_try:
            self.stdout.write(f'\n--- –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {enc} ---')
            if self.try_read_file(csv_file, enc):
                working_encoding = enc
                self.stdout.write(f'‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ {enc} —Ä–∞–±–æ—Ç–∞–µ—Ç!')
                break
            else:
                self.stdout.write(f'‚ùå –ö–æ–¥–∏—Ä–æ–≤–∫–∞ {enc} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
        
        if not working_encoding:
            self.stdout.write(self.style.ERROR('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É'))
            return

        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç
        self.stdout.write(f'\nüì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {working_encoding}')
        
        created_brands = 0
        updated_brands = 0
        errors = 0
        
        try:
            with open(csv_file, 'r', encoding=working_encoding) as file:
                lines = file.readlines()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–∏–ø—ã, NOT NULL)
                data_lines = lines[3:] if len(lines) > 3 else lines
                
                self.stdout.write(f'üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(data_lines)}')
                
                for line_num, line in enumerate(data_lines, start=1):
                    try:
                        if test_lines > 0 and line_num > test_lines:
                            self.stdout.write(f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫: {test_lines}')
                            break
                        
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
                        line = line.strip()
                        if not line:
                            continue
                            
                        fields = line.split(delimiter)
                        
                        if len(fields) < 3:
                            self.stdout.write(f'‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π: {line}')
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        brand_code = fields[1].strip()
                        brand_name = fields[2].strip()
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                        if not brand_code or not brand_name or brand_code in ['code', 'Character(11,0)']:
                            continue
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
                        if line_num <= 10:
                            self.stdout.write(f'–°—Ç—Ä–æ–∫–∞ {line_num}: –∫–æ–¥={brand_code}, –Ω–∞–∑–≤–∞–Ω–∏–µ={brand_name}')
                        
                        # –°–æ–∑–¥–∞–µ–º slug
                        brand_slug = slugify(brand_name)
                        if not brand_slug:
                            brand_slug = f'brand-{brand_code}'
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥
                        brand, created = Brand.objects.get_or_create(
                            slug=brand_slug,
                            defaults={
                                'name': brand_name,
                                'description': f'–ë—Ä–µ–Ω–¥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ 1–° (–∫–æ–¥: {brand_code})'
                            }
                        )
                        
                        if created:
                            created_brands += 1
                            if created_brands <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
                                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –±—Ä–µ–Ω–¥: {brand_name} (slug: {brand_slug})')
                        else:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            if brand.name != brand_name:
                                brand.name = brand_name
                                brand.save()
                                updated_brands += 1
                        
                        if (created_brands + updated_brands) % 100 == 0:
                            self.stdout.write(f'üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {created_brands + updated_brands} –±—Ä–µ–Ω–¥–æ–≤')
                            
                    except Exception as e:
                        errors += 1
                        if errors <= 10:
                            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {str(e)}')
                        continue
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                self.stdout.write(self.style.SUCCESS(f'''
üìä –ò–ú–ü–û–†–¢ –ë–†–ï–ù–î–û–í –ó–ê–í–ï–†–®–ï–ù:
‚úÖ –°–æ–∑–¥–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {created_brands}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {updated_brands}
‚ùå –û—à–∏–±–æ–∫: {errors}
üì¶ –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑–µ: {Brand.objects.count()}
'''))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}')) 