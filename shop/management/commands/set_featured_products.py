from django.core.management.base import BaseCommand
from shop.models import Product
import random


class Command(BaseCommand):
    help = '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ (featured) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count', 
            type=int, 
            default=15,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)'
        )
        parser.add_argument(
            '--clear-existing', 
            action='store_true',
            help='–°–Ω–∞—á–∞–ª–∞ —É–±—Ä–∞—Ç—å —Ñ–ª–∞–≥ featured —É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤'
        )
        parser.add_argument(
            '--by-brand',
            type=str,
            help='–í—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞'
        )

    def handle(self, *args, **options):
        count = options['count']
        clear_existing = options['clear_existing']
        by_brand = options.get('by_brand')

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
        if clear_existing:
            existing_featured = Product.objects.filter(is_featured=True).count()
            if existing_featured > 0:
                Product.objects.filter(is_featured=True).update(is_featured=False)
                self.stdout.write(f'üßπ –£–±—Ä–∞–Ω —Ñ–ª–∞–≥ "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π" —É {existing_featured} —Ç–æ–≤–∞—Ä–æ–≤')

        # –ë–∞–∑–æ–≤—ã–π queryset
        available_products = Product.objects.filter(in_stock=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if by_brand:
            available_products = available_products.filter(brand__name__icontains=by_brand)
            self.stdout.write(f'üîç –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞: {by_brand}')

        total_available = available_products.count()
        
        if total_available == 0:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ!'))
            return

        if total_available < count:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {total_available} —Ç–æ–≤–∞—Ä–æ–≤, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {total_available} –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ'))
            count = total_available

        self.stdout.write(f'üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏: {total_available}')
        self.stdout.write(f'üéØ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ: {count}')

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º order_by('?') –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
        random_products = available_products.order_by('?')[:count]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ is_featured
        updated_count = 0
        popular_brands = set()
        popular_categories = set()

        for product in random_products:
            product.is_featured = True
            product.save()
            updated_count += 1
            
            if product.brand:
                popular_brands.add(product.brand.name)
            if product.category:
                popular_categories.add(product.category.name)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if updated_count <= 5:
                brand_name = product.brand.name if product.brand else '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞'
                category_name = product.category.name if product.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                self.stdout.write(f'   ‚≠ê {product.name[:50]}... | {brand_name} | {category_name}')

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(f'\n‚úÖ –ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–û–í–ê–†–´ –£–°–¢–ê–ù–û–í–õ–ï–ù–´!')
        self.stdout.write(f'   üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count}')
        self.stdout.write(f'   üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(popular_brands)}')
        self.stdout.write(f'   üìÅ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(popular_categories)}')

        if popular_brands:
            self.stdout.write(f'\nüè≠ –ë—Ä–µ–Ω–¥—ã –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö:')
            for brand in sorted(popular_brands):
                self.stdout.write(f'   ‚Ä¢ {brand}')

        if popular_categories:
            self.stdout.write(f'\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö:')
            for category in sorted(popular_categories):
                self.stdout.write(f'   ‚Ä¢ {category}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_featured_count = Product.objects.filter(is_featured=True, in_stock=True).count()
        self.stdout.write(f'\nüéâ –¢–µ–ø–µ—Ä—å –Ω–∞ —Å–∞–π—Ç–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è {final_featured_count} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!')
        self.stdout.write('üåê –û–±–Ω–æ–≤–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π')

        if final_featured_count > 0:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ –°–µ–∫—Ü–∏—è "–ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —á–∞—â–µ –≤—Å–µ–≥–æ –ø–æ–∫—É–ø–∞—é—Ç—Å—è?" —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!'))
        else:
            self.stdout.write(self.style.ERROR('\n‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!'))