import csv
import os
from collections import defaultdict, Counter
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = '–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')

    def handle(self, *args, **options):
        csv_file = options['csv_file']
        
        if not os.path.exists(csv_file):
            self.stdout.write(self.style.ERROR(f'CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}'))
            return

        self.stdout.write('üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ CSV...')
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        products_by_image = defaultdict(list)  # image_path -> [product_codes]
        section_counter = Counter()  # section_id -> count
        name_counter = Counter()  # name -> count
        producer_counter = Counter()  # producer -> count
        
        total_rows = 0
        valid_rows = 0
        
        with open(csv_file, 'r', encoding='utf-8-sig') as file:
            reader = csv.DictReader(file, delimiter=';')
            
            for row in reader:
                total_rows += 1
                
                tmp_id = (row.get('TMP_ID') or '').strip()
                name = (row.get('NAME') or '').strip()
                producer = (row.get('PROPERTY_PRODUCER_ID') or '').strip()
                section_id = (row.get('SECTION_ID') or '').strip()
                
                if not tmp_id or not name:
                    continue
                    
                valid_rows += 1
                
                # –û—á–∏—â–∞–µ–º SECTION_ID
                if section_id:
                    section_id = section_id.replace('[', '').replace(']', '').replace(';', '')
                
                # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                if section_id:
                    image_path = f'{section_id}/{tmp_id}.jpg'
                    products_by_image[image_path].append({
                        'code': tmp_id,
                        'name': name,
                        'producer': producer,
                        'section': section_id
                    })
                
                # –°—á–µ—Ç—á–∏–∫–∏
                section_counter[section_id] += 1
                name_counter[name] += 1
                if producer:
                    producer_counter[producer] += 1
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.stdout.write(f'\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: {total_rows}')
        self.stdout.write(f'‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {valid_rows}')
        self.stdout.write(f'üìÅ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(section_counter)}')
        self.stdout.write(f'üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(producer_counter)}')
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.stdout.write(f'\nüì¶ –¢–û–ü-10 –ö–ê–¢–ï–ì–û–†–ò–ô –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –¢–û–í–ê–†–û–í:')
        for section, count in section_counter.most_common(10):
            self.stdout.write(f'  üìÇ {section}: {count} —Ç–æ–≤–∞—Ä–æ–≤')
        
        # –¢–æ–ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
        self.stdout.write(f'\nüè≠ –¢–û–ü-10 –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ï–ô:')
        for producer, count in producer_counter.most_common(10):
            producer_name = producer if producer else '–ë–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è'
            self.stdout.write(f'  üîß {producer_name}: {count} —Ç–æ–≤–∞—Ä–æ–≤')
        
        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π
        duplicate_names = {name: count for name, count in name_counter.items() if count > 1}
        self.stdout.write(f'\nüìù –î–£–ë–õ–ò–ö–ê–¢–´ –ù–ê–ó–í–ê–ù–ò–ô:')
        self.stdout.write(f'üîÑ –¢–æ–≤–∞—Ä–æ–≤ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {len(duplicate_names)}')
        
        if duplicate_names:
            self.stdout.write(f'\nüîç –¢–û–ü-10 –°–ê–ú–´–• –ß–ê–°–¢–´–• –ù–ê–ó–í–ê–ù–ò–ô:')
            for name, count in Counter(duplicate_names).most_common(10):
                self.stdout.write(f'  üìã "{name[:60]}..." –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑')
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.stdout.write(f'\nüñºÔ∏è –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        existing_images = 0
        missing_images = 0
        images_with_multiple_products = 0
        
        for image_path, products in products_by_image.items():
            full_path = os.path.join(settings.BASE_DIR, 'images', image_path)
            
            if os.path.exists(full_path):
                existing_images += 1
                if len(products) > 1:
                    images_with_multiple_products += 1
            else:
                missing_images += 1
        
        total_image_paths = len(products_by_image)
        
        self.stdout.write(f'üì∑ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: {total_image_paths}')
        self.stdout.write(f'‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {existing_images}')
        self.stdout.write(f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {missing_images}')
        self.stdout.write(f'üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {images_with_multiple_products}')
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if images_with_multiple_products > 0:
            self.stdout.write(f'\nüîÑ –ü–†–ò–ú–ï–†–´ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –î–õ–Ø –ù–ï–°–ö–û–õ–¨–ö–ò–• –¢–û–í–ê–†–û–í:')
            count = 0
            for image_path, products in products_by_image.items():
                if len(products) > 1:
                    full_path = os.path.join(settings.BASE_DIR, 'images', image_path)
                    if os.path.exists(full_path):
                        self.stdout.write(f'  üì∑ {image_path} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è {len(products)} —Ç–æ–≤–∞—Ä–æ–≤:')
                        for product in products[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            self.stdout.write(f'    ‚Ä¢ {product["code"]} - {product["name"][:40]}...')
                        if len(products) > 3:
                            self.stdout.write(f'    ... –∏ –µ—â–µ {len(products) - 3} —Ç–æ–≤–∞—Ä–æ–≤')
                        count += 1
                        if count >= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
                            break
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        coverage_percent = (existing_images / total_image_paths * 100) if total_image_paths > 0 else 0
        self.stdout.write(f'\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
        
        if coverage_percent < 50:
            self.stdout.write('‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã')
        elif coverage_percent < 80:
            self.stdout.write('‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')
        else:
            self.stdout.write('‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')
        
        if images_with_multiple_products > 0:
            self.stdout.write('üîÑ –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–æ–≥–æ–≤')
        
        if duplicate_names:
            self.stdout.write('üìù –ú–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –∞–Ω–∞–ª–æ–≥–∏ –∏–ª–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏')
            
        self.stdout.write(f'üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {coverage_percent:.1f}%') 