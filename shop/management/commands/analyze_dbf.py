import os
from django.core.management.base import BaseCommand
import re

try:
    from dbfread import DBF
except ImportError:
    DBF = None


class Command(BaseCommand):
    help = '–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –∏–º–ø–æ—Ä—Ç–∞ DBF - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'

    def add_arguments(self, parser):
        parser.add_argument('dbf_file', type=str, help='–ü—É—Ç—å –∫ DBF —Ñ–∞–π–ª—É')
        parser.add_argument('--encoding', type=str, default='cp1251', help='–ö–æ–¥–∏—Ä–æ–≤–∫–∞ DBF —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é cp1251)')
        parser.add_argument('--sample-size', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)')

    def parse_dbf_record(self, record):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–ø–∏—Å—å –∏–∑ DBF —Ñ–∞–π–ª–∞"""
        return {
            'TMP_ID': str(record.get('TMP_ID', '')).strip(),
            'NAME': str(record.get('NAME', '')).strip(),
            'PROPERTY_P': str(record.get('PROPERTY_P', '')).strip(),  # –±—Ä–µ–Ω–¥
            'PROPERTY_T': str(record.get('PROPERTY_T', '')).strip(),  # –∫–∞—Ç–∞–ª–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä
            'PROPERTY_A': str(record.get('PROPERTY_A', '')).strip(),  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            'PROPERTY_M': str(record.get('PROPERTY_M', '')).strip(),  # –ø—Ä–∏–º–µ–Ω—è–µ–º–æ—Å—Ç—å
            'PROPERTY_C': str(record.get('PROPERTY_C', '')).strip(),  # –∫—Ä–æ—Å—Å-–∫–æ–¥
            'SECTION_ID': str(record.get('SECTION_ID', '')).strip(),  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        }

    def handle(self, *args, **options):
        if not DBF:
            error_msg = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ dbfread –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install dbfread'
            self.stdout.write(self.style.ERROR(error_msg))
            return

        dbf_file = options['dbf_file']
        encoding = options['encoding']
        sample_size = options['sample_size']
        
        if not os.path.exists(dbf_file):
            self.stdout.write(self.style.ERROR(f'üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dbf_file}'))
            return

        if not dbf_file.lower().endswith('.dbf'):
            self.stdout.write(self.style.ERROR(f'üö´ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .dbf: {dbf_file}'))
            return

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º DBF —Ñ–∞–π–ª
            table = DBF(dbf_file, encoding=encoding)
            total_records = len(table)
            
            self.stdout.write(f'üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê DBF –§–ê–ô–õ–ê:')
            self.stdout.write(f'   üìÅ –§–∞–π–ª: {os.path.basename(dbf_file)}')
            self.stdout.write(f'   üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(dbf_file) / (1024*1024):.2f} MB')
            self.stdout.write(f'   üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}')
            self.stdout.write(f'   üî§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            field_info = table.field_names
            self.stdout.write(f'\nüóÇÔ∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´:')
            for i, field_name in enumerate(field_info, 1):
                self.stdout.write(f'   {i:2d}. {field_name}')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
            valid_records = 0
            empty_tmp_id = 0
            empty_name = 0
            empty_producer = 0
            empty_section_id = 0
            duplicate_tmp_ids = 0
            invalid_chars = 0
            
            tmp_ids_seen = set()
            problem_records = []
            sample_records = []
            producers = set()
            sections = set()
            
            self.stdout.write(f'\nüîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:')
            
            for record_num, record in enumerate(table, start=1):
                try:
                    # –ü–∞—Ä—Å–∏–º –∑–∞–ø–∏—Å—å
                    data = self.parse_dbf_record(record)
                    
                    tmp_id = data.get('TMP_ID', '').strip()
                    name = data.get('NAME', '').strip()
                    producer = data.get('PROPERTY_P', '').strip()
                    section_id = data.get('SECTION_ID', '').strip()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if len(sample_records) < sample_size:
                        sample_records.append({
                            'num': record_num,
                            'tmp_id': tmp_id,
                            'name': name[:40] + '...' if len(name) > 40 else name,
                            'producer': producer,
                            'section': section_id
                        })

                    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                    has_problems = False
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if not tmp_id:
                        empty_tmp_id += 1
                        has_problems = True
                        if len(problem_records) < 10:
                            problem_records.append(f'–ó–∞–ø–∏—Å—å {record_num}: –ü—É—Å—Ç–æ–π TMP_ID')
                            
                    if not name:
                        empty_name += 1
                        has_problems = True
                        if len(problem_records) < 10:
                            problem_records.append(f'–ó–∞–ø–∏—Å—å {record_num}: –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (TMP_ID: {tmp_id})')
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î—É–±–ª–∏–∫–∞—Ç—ã TMP_ID
                    if tmp_id and tmp_id in tmp_ids_seen:
                        duplicate_tmp_ids += 1
                        has_problems = True
                        if len(problem_records) < 10:
                            problem_records.append(f'–ó–∞–ø–∏—Å—å {record_num}: –î—É–±–ª–∏–∫–∞—Ç TMP_ID: {tmp_id}')
                    elif tmp_id:
                        tmp_ids_seen.add(tmp_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    if tmp_id and re.search(r'["\'\[\]<>]', tmp_id):
                        invalid_chars += 1
                        has_problems = True
                        if len(problem_records) < 10:
                            problem_records.append(f'–ó–∞–ø–∏—Å—å {record_num}: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ TMP_ID: {tmp_id}')
                    
                    if name and re.search(r'["\'\[\]<>]', name):
                        invalid_chars += 1
                        has_problems = True
                        if len(problem_records) < 10:
                            problem_records.append(f'–ó–∞–ø–∏—Å—å {record_num}: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏')
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if not producer:
                        empty_producer += 1
                    else:
                        producers.add(producer)
                        
                    if not section_id:
                        empty_section_id += 1
                    else:
                        sections.add(section_id)
                    
                    if not has_problems:
                        valid_records += 1
                        
                except Exception as e:
                    if len(problem_records) < 10:
                        problem_records.append(f'–ó–∞–ø–∏—Å—å {record_num}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}')
                    continue

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self.stdout.write(f'\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:')
            self.stdout.write(f'   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {valid_records}')
            self.stdout.write(f'   ‚ùå –ü—É—Å—Ç–æ–π TMP_ID: {empty_tmp_id}')
            self.stdout.write(f'   ‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {empty_name}')
            self.stdout.write(f'   ‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã TMP_ID: {duplicate_tmp_ids}')
            self.stdout.write(f'   ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {invalid_chars}')
            self.stdout.write(f'   ‚ö†Ô∏è –ë–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: {empty_producer}')
            self.stdout.write(f'   ‚ö†Ô∏è –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {empty_section_id}')
            
            lost_records = total_records - valid_records
            success_rate = (valid_records / total_records * 100) if total_records > 0 else 0
            
            self.stdout.write(f'\nüí• –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–û–¢–ï–†–ò:')
            self.stdout.write(f'   üìâ –ü–æ—Ç–µ—Ä—è–Ω–æ –∑–∞–ø–∏—Å–µ–π: {lost_records}')
            self.stdout.write(f'   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞: {success_rate:.1f}%')

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            self.stdout.write(f'\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
            self.stdout.write(f'   üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(producers)}')
            self.stdout.write(f'   üìÅ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(sections)}')

            # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
            if sample_records:
                self.stdout.write(f'\nüìÑ –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô (–ø–µ—Ä–≤—ã–µ {len(sample_records)}):')
                for sample in sample_records:
                    self.stdout.write(f'   {sample["num"]:3d}: {sample["tmp_id"]:<12} | {sample["name"]:<40} | {sample["producer"]:<15} | {sample["section"]}')

            # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º
            if problem_records:
                self.stdout.write(f'\n‚ö†Ô∏è –ü–†–ò–ú–ï–†–´ –ü–†–û–ë–õ–ï–ú:')
                for problem in problem_records:
                    self.stdout.write(f'   {problem}')

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.stdout.write(f'\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
            if empty_tmp_id > 0:
                self.stdout.write(f'   - ‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é TMP_ID –¥–ª—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ ID')
            if empty_name > 0:
                self.stdout.write(f'   - üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if duplicate_tmp_ids > 0:
                self.stdout.write(f'   - üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã TMP_ID (–¥–æ–±–∞–≤–ª—è—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å)')
            if invalid_chars > 0:
                self.stdout.write(f'   - üßπ –û—á–∏—â–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö')
            if empty_producer > 0:
                self.stdout.write(f'   - üè≠ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è')
            if empty_section_id > 0:
                self.stdout.write(f'   - üìÅ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∞')

            # –ü—Ä–æ–≥–Ω–æ–∑ –∏–º–ø–æ—Ä—Ç–∞
            self.stdout.write(f'\nüéØ –ü–†–û–ì–ù–û–ó –ò–ú–ü–û–†–¢–ê:')
            if lost_records == 0:
                self.stdout.write(self.style.SUCCESS(f'üéâ –í–°–ï –ó–ê–ü–ò–°–ò –í–ê–õ–ò–î–ù–´! –î–æ–ª–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è {valid_records} —Ç–æ–≤–∞—Ä–æ–≤'))
            elif success_rate >= 95:
                self.stdout.write(self.style.SUCCESS(f'‚úÖ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {valid_records} –∏–∑ {total_records} —Ç–æ–≤–∞—Ä–æ–≤ ({success_rate:.1f}%)'))
            elif success_rate >= 80:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢. –ë—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {valid_records} –∏–∑ {total_records} —Ç–æ–≤–∞—Ä–æ–≤ ({success_rate:.1f}%)'))
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú! –ë—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ {lost_records} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {total_records} ({(100-success_rate):.1f}%)'))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if producers:
                sorted_producers = sorted(list(producers))[:10]
                self.stdout.write(f'\nüè≠ –¢–û–ü –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ï–ô (–ø–µ—Ä–≤—ã–µ 10):')
                for i, producer in enumerate(sorted_producers, 1):
                    self.stdout.write(f'   {i:2d}. {producer}')
            
            if sections:
                sorted_sections = sorted(list(sections))[:10]
                self.stdout.write(f'\nüìÅ –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ô (–ø–µ—Ä–≤—ã–µ 10):')
                for i, section in enumerate(sorted_sections, 1):
                    self.stdout.write(f'   {i:2d}. {section}')

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DBF: {str(e)}'))
            import traceback
            traceback.print_exc()
