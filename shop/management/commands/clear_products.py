from django.core.management.base import BaseCommand
from django.db import transaction
from shop.models import Product, ProductImage, ProductAnalog, OeKod, Category, Brand
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–û—á–∏—Å—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--keep-categories', 
            action='store_true',
            help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ —É–¥–∞–ª—è—Ç—å)'
        )
        parser.add_argument(
            '--keep-brands', 
            action='store_true',
            help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—Ä–µ–Ω–¥—ã (–Ω–µ —É–¥–∞–ª—è—Ç—å)'
        )
        parser.add_argument(
            '--confirm', 
            action='store_true',
            help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'
        )

    def handle(self, *args, **options):
        keep_categories = options.get('keep_categories', False)
        keep_brands = options.get('keep_brands', False)
        confirm = options.get('confirm', False)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        products_count = Product.objects.count()
        images_count = ProductImage.objects.count()
        analogs_count = ProductAnalog.objects.count()
        oe_count = OeKod.objects.count()
        categories_count = Category.objects.count()
        brands_count = Brand.objects.count()

        self.stdout.write('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:')
        self.stdout.write(f'   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {products_count}')
        self.stdout.write(f'   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {images_count}')
        self.stdout.write(f'   üîó –ê–Ω–∞–ª–æ–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {analogs_count}')
        self.stdout.write(f'   üè∑Ô∏è OE –∫–æ–¥–æ–≤: {oe_count}')
        self.stdout.write(f'   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}')
        self.stdout.write(f'   üè≠ –ë—Ä–µ–Ω–¥–æ–≤: {brands_count}')

        if products_count == 0:
            self.stdout.write(self.style.SUCCESS('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞!'))
            return

        self.stdout.write(f'\n‚ö†Ô∏è –ü–õ–ê–ù –£–î–ê–õ–ï–ù–ò–Ø:')
        self.stdout.write(f'   üóëÔ∏è –¢–æ–≤–∞—Ä—ã: {products_count} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')
        self.stdout.write(f'   üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {images_count} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')
        self.stdout.write(f'   üóëÔ∏è –ê–Ω–∞–ª–æ–≥–∏: {analogs_count} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')
        self.stdout.write(f'   üóëÔ∏è OE –∫–æ–¥—ã: {oe_count} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')
        
        if keep_categories:
            self.stdout.write(f'   üíæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count} (—Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è)')
        else:
            self.stdout.write(f'   üóëÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')
            
        if keep_brands:
            self.stdout.write(f'   üíæ –ë—Ä–µ–Ω–¥—ã: {brands_count} (—Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è)')
        else:
            self.stdout.write(f'   üóëÔ∏è –ë—Ä–µ–Ω–¥—ã: {brands_count} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)')

        if not confirm:
            self.stdout.write(f'\n‚ùó –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')
            
            response = input('\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (yes/no): ')
            if response.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
                self.stdout.write(self.style.WARNING('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'))
                return

        self.stdout.write(f'\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        try:
            with transaction.atomic():
                # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –∑–∞–≤–∏—Å–∏–º—ã—Ö –∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º)
                
                # 1. –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
                if images_count > 0:
                    deleted_images = ProductImage.objects.all().delete()[0]
                    self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {deleted_images}')
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {deleted_images}")

                # 2. –£–¥–∞–ª—è–µ–º –∞–Ω–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤
                if analogs_count > 0:
                    deleted_analogs = ProductAnalog.objects.all().delete()[0]
                    self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {deleted_analogs}')
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {deleted_analogs}")

                # 3. –£–¥–∞–ª—è–µ–º OE –∫–æ–¥—ã
                if oe_count > 0:
                    deleted_oe = OeKod.objects.all().delete()[0]
                    self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ OE –∫–æ–¥–æ–≤: {deleted_oe}')
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ OE –∫–æ–¥–æ–≤: {deleted_oe}")

                # 4. –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
                if products_count > 0:
                    deleted_products = Product.objects.all().delete()[0]
                    self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {deleted_products}')
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {deleted_products}")

                # 5. –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
                if not keep_categories and categories_count > 0:
                    deleted_categories = Category.objects.all().delete()[0]
                    self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {deleted_categories}')
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {deleted_categories}")

                # 6. –£–¥–∞–ª—è–µ–º –±—Ä–µ–Ω–¥—ã (–µ—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
                if not keep_brands and brands_count > 0:
                    deleted_brands = Brand.objects.all().delete()[0]
                    self.stdout.write(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {deleted_brands}')
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {deleted_brands}")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            final_products = Product.objects.count()
            final_categories = Category.objects.count()
            final_brands = Brand.objects.count()

            self.stdout.write(f'\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!')
            self.stdout.write(f'üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
            self.stdout.write(f'   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {final_products}')
            self.stdout.write(f'   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {final_categories}')
            self.stdout.write(f'   üè≠ –ë—Ä–µ–Ω–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {final_brands}')

            if final_products == 0:
                self.stdout.write(self.style.SUCCESS('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!'))
                self.stdout.write('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–º–ø–æ—Ä—Ç DBF —Ñ–∞–π–ª–æ–≤')
            else:
                self.stdout.write(self.style.WARNING(f'\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã: {final_products}'))

            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–æ–≤–∞—Ä–æ–≤: {final_products}, –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {final_categories}, –ë—Ä–µ–Ω–¥–æ–≤: {final_brands}")

        except Exception as e:
            error_msg = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}'
            self.stdout.write(self.style.ERROR(f'‚ùå {error_msg}'))
            logger.error(error_msg)
            raise
